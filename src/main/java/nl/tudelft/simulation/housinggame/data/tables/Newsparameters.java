/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.NewsparametersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Newsparameters extends TableImpl<NewsparametersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.newsparameters</code>
     */
    public static final Newsparameters NEWSPARAMETERS = new Newsparameters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewsparametersRecord> getRecordType() {
        return NewsparametersRecord.class;
    }

    /**
     * The column <code>housinggame.newsparameters.id</code>.
     */
    public final TableField<NewsparametersRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.newsparameters.house_discount_euros</code>.
     */
    public final TableField<NewsparametersRecord, Byte> HOUSE_DISCOUNT_EUROS = createField(DSL.name("house_discount_euros"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>housinggame.newsparameters.house_discount_percent</code>.
     */
    public final TableField<NewsparametersRecord, Byte> HOUSE_DISCOUNT_PERCENT = createField(DSL.name("house_discount_percent"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>housinggame.newsparameters.house_discount_year1</code>.
     * House discount year 1 after flooding, in Euros or as a percentage
     */
    public final TableField<NewsparametersRecord, UInteger> HOUSE_DISCOUNT_YEAR1 = createField(DSL.name("house_discount_year1"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGERUNSIGNED)), this, "House discount year 1 after flooding, in Euros or as a percentage");

    /**
     * The column <code>housinggame.newsparameters.house_discount_year2</code>.
     * House discount year 2 after flooding, in Euros or as a percentage
     */
    public final TableField<NewsparametersRecord, UInteger> HOUSE_DISCOUNT_YEAR2 = createField(DSL.name("house_discount_year2"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGERUNSIGNED)), this, "House discount year 2 after flooding, in Euros or as a percentage");

    /**
     * The column <code>housinggame.newsparameters.house_discount_year3</code>.
     * House discount year 3 after flooding, in Euros or as a percentage
     */
    public final TableField<NewsparametersRecord, UInteger> HOUSE_DISCOUNT_YEAR3 = createField(DSL.name("house_discount_year3"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGERUNSIGNED)), this, "House discount year 3 after flooding, in Euros or as a percentage");

    /**
     * The column
     * <code>housinggame.newsparameters.pluvial_protection_change</code>.
     */
    public final TableField<NewsparametersRecord, Integer> PLUVIAL_PROTECTION_CHANGE = createField(DSL.name("pluvial_protection_change"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.newsparameters.fluvial_protection_change</code>.
     */
    public final TableField<NewsparametersRecord, Integer> FLUVIAL_PROTECTION_CHANGE = createField(DSL.name("fluvial_protection_change"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>housinggame.newsparameters.tax_change</code>.
     */
    public final TableField<NewsparametersRecord, Double> TAX_CHANGE = createField(DSL.name("tax_change"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.FLOAT)), this, "");

    /**
     * The column
     * <code>housinggame.newsparameters.satisfaction_living_bonus</code>.
     */
    public final TableField<NewsparametersRecord, Integer> SATISFACTION_LIVING_BONUS = createField(DSL.name("satisfaction_living_bonus"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.newsparameters.satisfaction_move_change</code>.
     */
    public final TableField<NewsparametersRecord, Integer> SATISFACTION_MOVE_CHANGE = createField(DSL.name("satisfaction_move_change"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>housinggame.newsparameters.newsitem_id</code>.
     */
    public final TableField<NewsparametersRecord, UInteger> NEWSITEM_ID = createField(DSL.name("newsitem_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.newsparameters.community_id</code>. When
     * community_id is NOT filled, all communities are affected equally.
     */
    public final TableField<NewsparametersRecord, UInteger> COMMUNITY_ID = createField(DSL.name("community_id"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGERUNSIGNED)), this, "When community_id is NOT filled, all communities are affected equally.");

    private Newsparameters(Name alias, Table<NewsparametersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Newsparameters(Name alias, Table<NewsparametersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.newsparameters</code> table reference
     */
    public Newsparameters(String alias) {
        this(DSL.name(alias), NEWSPARAMETERS);
    }

    /**
     * Create an aliased <code>housinggame.newsparameters</code> table reference
     */
    public Newsparameters(Name alias) {
        this(alias, NEWSPARAMETERS);
    }

    /**
     * Create a <code>housinggame.newsparameters</code> table reference
     */
    public Newsparameters() {
        this(DSL.name("newsparameters"), null);
    }

    public <O extends Record> Newsparameters(Table<O> child, ForeignKey<O, NewsparametersRecord> key) {
        super(child, key, NEWSPARAMETERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NEWSPARAMETERS_FK_NEWSPARAMETERS_COMMUNITY1_IDX, Indexes.NEWSPARAMETERS_FK_NEWSPARAMETERS_NEWSITEM1_IDX);
    }

    @Override
    public Identity<NewsparametersRecord, UInteger> getIdentity() {
        return (Identity<NewsparametersRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewsparametersRecord> getPrimaryKey() {
        return Keys.KEY_NEWSPARAMETERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<NewsparametersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NEWSPARAMETERS_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<NewsparametersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_NEWSPARAMETERS_NEWSITEM1, Keys.FK_NEWSPARAMETERS_COMMUNITY1);
    }

    private transient Newsitem _newsitem;
    private transient Community _community;

    /**
     * Get the implicit join path to the <code>housinggame.newsitem</code>
     * table.
     */
    public Newsitem newsitem() {
        if (_newsitem == null)
            _newsitem = new Newsitem(this, Keys.FK_NEWSPARAMETERS_NEWSITEM1);

        return _newsitem;
    }

    /**
     * Get the implicit join path to the <code>housinggame.community</code>
     * table.
     */
    public Community community() {
        if (_community == null)
            _community = new Community(this, Keys.FK_NEWSPARAMETERS_COMMUNITY1);

        return _community;
    }

    @Override
    public Newsparameters as(String alias) {
        return new Newsparameters(DSL.name(alias), this);
    }

    @Override
    public Newsparameters as(Name alias) {
        return new Newsparameters(alias, this);
    }

    @Override
    public Newsparameters as(Table<?> alias) {
        return new Newsparameters(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Newsparameters rename(String name) {
        return new Newsparameters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Newsparameters rename(Name name) {
        return new Newsparameters(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Newsparameters rename(Table<?> name) {
        return new Newsparameters(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UInteger, Byte, Byte, UInteger, UInteger, UInteger, Integer, Integer, Double, Integer, Integer, UInteger, UInteger> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super UInteger, ? super Byte, ? super Byte, ? super UInteger, ? super UInteger, ? super UInteger, ? super Integer, ? super Integer, ? super Double, ? super Integer, ? super Integer, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super UInteger, ? super Byte, ? super Byte, ? super UInteger, ? super UInteger, ? super UInteger, ? super Integer, ? super Integer, ? super Double, ? super Integer, ? super Integer, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
