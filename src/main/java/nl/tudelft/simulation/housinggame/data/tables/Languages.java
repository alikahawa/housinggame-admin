/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.LanguagesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Languages extends TableImpl<LanguagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.languages</code>
     */
    public static final Languages LANGUAGES = new Languages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguagesRecord> getRecordType() {
        return LanguagesRecord.class;
    }

    /**
     * The column <code>housinggame.languages.id</code>.
     */
    public final TableField<LanguagesRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.languages.name</code>.
     */
    public final TableField<LanguagesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>housinggame.languages.language_id1</code>.
     */
    public final TableField<LanguagesRecord, UInteger> LANGUAGE_ID1 = createField(DSL.name("language_id1"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.languages.language_id2</code>.
     */
    public final TableField<LanguagesRecord, UInteger> LANGUAGE_ID2 = createField(DSL.name("language_id2"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>housinggame.languages.language_id3</code>.
     */
    public final TableField<LanguagesRecord, UInteger> LANGUAGE_ID3 = createField(DSL.name("language_id3"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>housinggame.languages.language_id4</code>.
     */
    public final TableField<LanguagesRecord, UInteger> LANGUAGE_ID4 = createField(DSL.name("language_id4"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGERUNSIGNED)), this, "");

    private Languages(Name alias, Table<LanguagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Languages(Name alias, Table<LanguagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.languages</code> table reference
     */
    public Languages(String alias) {
        this(DSL.name(alias), LANGUAGES);
    }

    /**
     * Create an aliased <code>housinggame.languages</code> table reference
     */
    public Languages(Name alias) {
        this(alias, LANGUAGES);
    }

    /**
     * Create a <code>housinggame.languages</code> table reference
     */
    public Languages() {
        this(DSL.name("languages"), null);
    }

    public <O extends Record> Languages(Table<O> child, ForeignKey<O, LanguagesRecord> key) {
        super(child, key, LANGUAGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LANGUAGES_FK_LANGUAGES_LANGUAGE1_IDX, Indexes.LANGUAGES_FK_LANGUAGES_LANGUAGE2_IDX, Indexes.LANGUAGES_FK_LANGUAGES_LANGUAGE3_IDX, Indexes.LANGUAGES_FK_LANGUAGES_LANGUAGE4_IDX);
    }

    @Override
    public Identity<LanguagesRecord, UInteger> getIdentity() {
        return (Identity<LanguagesRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<LanguagesRecord> getPrimaryKey() {
        return Keys.KEY_LANGUAGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<LanguagesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_LANGUAGES_ID_UNIQUE, Keys.KEY_LANGUAGES_NAME_UNIQUE);
    }

    @Override
    public List<ForeignKey<LanguagesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_LANGUAGES_LANGUAGE1, Keys.FK_LANGUAGES_LANGUAGE2, Keys.FK_LANGUAGES_LANGUAGE3, Keys.FK_LANGUAGES_LANGUAGE4);
    }

    private transient Language _fkLanguagesLanguage1;
    private transient Language _fkLanguagesLanguage2;
    private transient Language _fkLanguagesLanguage3;
    private transient Language _fkLanguagesLanguage4;

    /**
     * Get the implicit join path to the <code>housinggame.language</code>
     * table, via the <code>fk_languages_language1</code> key.
     */
    public Language fkLanguagesLanguage1() {
        if (_fkLanguagesLanguage1 == null)
            _fkLanguagesLanguage1 = new Language(this, Keys.FK_LANGUAGES_LANGUAGE1);

        return _fkLanguagesLanguage1;
    }

    /**
     * Get the implicit join path to the <code>housinggame.language</code>
     * table, via the <code>fk_languages_language2</code> key.
     */
    public Language fkLanguagesLanguage2() {
        if (_fkLanguagesLanguage2 == null)
            _fkLanguagesLanguage2 = new Language(this, Keys.FK_LANGUAGES_LANGUAGE2);

        return _fkLanguagesLanguage2;
    }

    /**
     * Get the implicit join path to the <code>housinggame.language</code>
     * table, via the <code>fk_languages_language3</code> key.
     */
    public Language fkLanguagesLanguage3() {
        if (_fkLanguagesLanguage3 == null)
            _fkLanguagesLanguage3 = new Language(this, Keys.FK_LANGUAGES_LANGUAGE3);

        return _fkLanguagesLanguage3;
    }

    /**
     * Get the implicit join path to the <code>housinggame.language</code>
     * table, via the <code>fk_languages_language4</code> key.
     */
    public Language fkLanguagesLanguage4() {
        if (_fkLanguagesLanguage4 == null)
            _fkLanguagesLanguage4 = new Language(this, Keys.FK_LANGUAGES_LANGUAGE4);

        return _fkLanguagesLanguage4;
    }

    @Override
    public Languages as(String alias) {
        return new Languages(DSL.name(alias), this);
    }

    @Override
    public Languages as(Name alias) {
        return new Languages(alias, this);
    }

    @Override
    public Languages as(Table<?> alias) {
        return new Languages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(String name) {
        return new Languages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(Name name) {
        return new Languages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(Table<?> name) {
        return new Languages(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, String, UInteger, UInteger, UInteger, UInteger> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UInteger, ? super String, ? super UInteger, ? super UInteger, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UInteger, ? super String, ? super UInteger, ? super UInteger, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
